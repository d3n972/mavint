package main

import (
	"bytes"
	"embed"
	"encoding/json"
	"fmt"
	"github.com/d3n972/mavint/controllers"
	"github.com/d3n972/mavint/db"
	"github.com/d3n972/mavint/scheduledTasks"
	"github.com/foolin/goview"
	"github.com/foolin/goview/supports/ginview"
	"github.com/gin-gonic/gin"
	redis "github.com/go-redis/redis/v9"
	"io"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"runtime/debug"
	"strings"
	"time"
)

//go:embed assets/*
var Assets embed.FS

//go:embed templates/*
var Templates embed.FS

//go:embed public/*
var pwaManifest embed.FS

func XHR(c *gin.Context) bool {
	return strings.ToLower(c.Request.Header.Get("X-Requested-With")) == "xmlhttprequest"
}
func globalRecover(c *gin.Context) {
	defer func(c *gin.Context) {
		if rec := recover(); rec != nil {
			// that recovery also handle XHR's
			// you need handle it
			if XHR(c) {
				c.JSON(http.StatusInternalServerError, gin.H{
					"error": rec,
				})
			} else {
				// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

				// curl -X POST -d 'api_dev_key=a27677239273fe28e48fe0d4087a1fa0' -d 'api_paste_code=test' -d 'api_option=paste' "https://pastebin.com/api/api_post.php"
				//

				params := url.Values{}
				params.Add("api_dev_key", `a27677239273fe28e48fe0d4087a1fa0`)
				params.Add("api_user_key", "bcc663c029e394754e282b6cc5ff983c")
				params.Add("api_folder_key", "M5ZK65Ba")
				params.Add("api_paste_private", "2")
				params.Add("api_paste_expire_date", "N")
				params.Add("api_paste_name", fmt.Sprintf("%s %s", time.Now().Format(time.UnixDate), rec.(error).Error()))
				params.Add("api_paste_code", fmt.Sprintf("%s\n%s", rec.(error).Error(), string(debug.Stack())))
				params.Add("api_option", `paste`)
				body := strings.NewReader(params.Encode())

				req, err := http.NewRequest("POST", "https://pastebin.com/api/api_post.php", body)
				if err != nil {
					// handle err
				}
				req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

				resp, err := http.DefaultClient.Do(req)
				if err != nil {
					// handle err
				}
				defer resp.Body.Close()
				respBody, err := io.ReadAll(resp.Body)
				if err != nil {
					fmt.Errorf("%s", err)
				}
				traceURL := strings.Replace(string(respBody), "https://pastebin.com/", "https://pastebin.com/raw/", 1)
				// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

				// curl \
				//   -H "Content-Type: application/json" \
				//   -d '{"username": "test", "content": "hello"}' \
				//   $WEBHOOK_URL

				type Payload struct {
					Username string `json:"username"`
					Content  string `json:"content"`
				}

				data := Payload{
					Username: "Go Exception Handler",
					Content:  fmt.Sprintf("%s\n%s", rec.(error).Error(), traceURL),
				}
				payloadBytes, err := json.Marshal(data)
				if err != nil {
					// handle err
				}
				body2 := bytes.NewReader(payloadBytes)

				req, err = http.NewRequest("POST", "https://discord.com/api/webhooks/1021446205131214898/V0pKEg2xQykjRizJugmopAzQ6y8Y_pfTzgMpmA9rXicrAZw5_HDWtUXGYfxsZ7l6kzkW", body2)
				if err != nil {
					// handle err
				}
				req.Header.Set("Content-Type", "application/json")
				resp, err = http.DefaultClient.Do(req)
				if err != nil {
					// handle err
				}
				defer resp.Body.Close()
				c.HTML(http.StatusOK, "500", gin.H{
					"error":    rec.(error).Error(),
					"traceURL": traceURL,
				})
			}
		}
	}(c)
	c.Next()
}
func embeddedFH(config goview.Config, tmpl string) (string, error) {
	path := filepath.Join(config.Root, tmpl)
	bytes, err := Templates.ReadFile(path + config.Extension)
	return string(bytes), err
}
func main() {
	appCtx := scheduledTasks.AppContext{}
	appCtx.Db = db.GetDbInstance()
	appCtx.Redis = redis.NewClient(&redis.Options{
		Addr:     "cache:6379",
		Password: "eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81", // no password set
		DB:       0,                                  // use default DB
	})

	schedRunner := scheduledTasks.NewTaskRunner()
	//schedRunner.AddTask("redisTask", scheduledTasks.GetRedisTask())
	schedRunner.AddTask("havariaUpdaterTask", scheduledTasks.HavarianUpdaterTask())
	go schedRunner.Start(appCtx)
	os.Setenv("TZ", "Europe/Budapest")

	r := gin.Default()
	r.TrustedPlatform = gin.PlatformCloudflare
	r.Use(gin.Logger())
	r.Use(globalRecover)
	r.Use(func(ctx *gin.Context) {
		ctx.Set("cache", appCtx.Redis)
	})
	gvEngine := ginview.New(goview.Config{
		Root:         "templates",
		Extension:    ".tmpl",
		Master:       "layouts/master",
		Funcs:        GetFuncMap(),
		DisableCache: true,
		Delims:       goview.Delims{Left: "{{", Right: "}}"},
	})
	if os.Getenv("GIN_MODE") == "release" {
		fmt.Println("[Running in release mode, using embedded templates]")
		gvEngine.ViewEngine.SetFileHandler(embeddedFH)
	}
	r.HTMLRender = gvEngine

	r.StaticFS("/public", http.FS(Assets))
	r.StaticFS("/app", http.FS(pwaManifest))
	ttblCtrl := controllers.TimetableController{}
	tdCtrl := controllers.TrainDetailsController{}
	ticketCtrl := controllers.TicketController{}
	mapController := controllers.MapController{}
	emigController := controllers.EmigController{}
	newsController := controllers.NewsController{}
	r.GET("/emig", emigController.Render)
	r.GET("/getdata/emig", emigController.GetTrainEngines)
	r.GET("/tt", ttblCtrl.Render)
	r.GET("/station/:station_code", ttblCtrl.Render)
	r.GET("/station", func(ctx *gin.Context) {
		ctx.Redirect(http.StatusMovedPermanently, "/station/00"+ctx.Query("station_id"))
	})
	r.GET("/station_select", ttblCtrl.RenderSelectorPage)
	r.GET("/m", tdCtrl.Render)
	r.GET("/news", newsController.Render)
	r.GET("/article", newsController.RenderArticle)

	r.GET("/", func(c *gin.Context) {
		c.HTML(http.StatusOK, "pages/index", gin.H{})
	})
	r.GET("/map", mapController.Render)
	r.GET("/map/getdata", mapController.GetData)

	r.GET("/train/:train", tdCtrl.Render)
	r.GET("/ticket", ticketCtrl.Render)
	r.GET("/ping", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"message": "pong",
		})
	})
	r.Run(":12700") // listen and serve on 0.0.0.0:12700
}
